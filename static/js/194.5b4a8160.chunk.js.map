{"version":3,"file":"static/js/194.5b4a8160.chunk.js","mappings":"kPACaA,EAAQC,EAAAA,GAAAA,MAAH,oeAsBLC,EAASD,EAAAA,GAAAA,OAAH,0Y,6BCjBbE,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KACHG,QACC,yHACA,gBAEDC,SAAS,oBACZC,OAAQL,EAAAA,KACLG,QACC,8EACA,+BAEDC,SAAS,sBAEDE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAEP,KAAM,GAAIG,OAAQ,IACnCK,SAAU,SAACC,EAAQC,GACjBL,GAASM,EAAAA,EAAAA,IAAWF,IACpBC,EAAQE,WACT,EACDC,iBAAkBhB,EANpB,UAQE,UAAC,KAAD,YACE,UAACH,EAAD,YACE,yBAAK,UACL,SAAC,KAAD,CAAOoB,KAAK,OAAOd,KAAK,UACxB,SAAC,KAAD,CAAcA,KAAK,OAAOe,UAAU,aAEtC,UAACrB,EAAD,YACE,yBAAK,YACL,SAAC,KAAD,CAAOoB,KAAK,MAAMd,KAAK,YACvB,SAAC,KAAD,CAAcA,KAAK,SAASe,UAAU,aAGxC,SAACnB,EAAD,CAAQkB,KAAK,SAAb,SAAsB,oBAI7B,EC9CYE,EAAKrB,EAAAA,GAAAA,GAAH,sEAIFC,EAASD,EAAAA,GAAAA,OAAH,+XAkBNsB,EAAKtB,EAAAA,GAAAA,GAAH,kbCvBFuB,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAV,E,UCI3BC,GAAOC,EAAAA,EAAAA,IAAH,uGAUGC,GAAU5B,EAAAA,EAAAA,IAAO6B,EAAAA,IAAP7B,CAAH,wHAIL0B,GAGfE,EAAQE,aAAe,CACrBC,KAAM,I,kBCtBKC,EAAiB,SAAAR,GAAK,OAAIA,EAAMS,SAASC,KAAnB,EACtBC,EAAkB,SAAAX,GAAK,OAAIA,EAAMS,SAASG,SAAnB,EACvBC,EAAc,SAAAb,GAAK,OAAIA,EAAMS,SAASK,KAAnB,ECUnBC,EAAc,WACzB,IAAM7B,GAAWC,EAAAA,EAAAA,MACXc,GAASe,EAAAA,EAAAA,IAAYjB,GACrBU,GAAWO,EAAAA,EAAAA,IAAYR,GACvBI,GAAYI,EAAAA,EAAAA,IAAYL,GACxBG,GAAQE,EAAAA,EAAAA,IAAYH,IAE1BI,EAAAA,EAAAA,YAAU,WACR/B,GAASgC,EAAAA,EAAAA,MACV,GAAE,CAAChC,IAQJ,OACE,gCACG4B,IAAS,uBAAIA,EAAMK,UACnBP,IAAa,SAACR,EAAD,WACNK,EAASW,SAAWR,IAC1B,SAACf,EAAD,UAXmB,SAAAI,GACvB,OAAOQ,EAASR,QAAO,SAAAoB,GAAO,OAC5BA,EAAQxC,KAAKyC,cAAcC,SAAStB,EAAOqB,cADf,GAG/B,CAQQE,CAAiBvB,GAAQwB,KAAI,gBAAGC,EAAH,EAAGA,GAAI7C,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAb,OAC5B,UAACc,EAAD,YACE,2BACGjB,EAAK,KAAGG,MAEX,SAAC,EAAD,CAAQ2C,QAAS,kBAAMzC,GAAS0C,EAAAA,EAAAA,IAAcF,GAA7B,EAAmC/B,KAAK,SAAzD,SAAkE,aAJ3D+B,EADmB,QAcvC,EChDYG,EAAKrD,EAAAA,GAAAA,GAAH,yFAKFsD,EAAQtD,EAAAA,GAAAA,MAAH,2I,UCFLuD,EAAS,WACpB,IAAM7C,GAAWC,EAAAA,EAAAA,MACX6C,GAAchB,EAAAA,EAAAA,IAAYjB,GAChC,OACE,iCACE,SAAC8B,EAAD,UAAI,kBACJ,SAACC,EAAD,CACEG,SAAU,SAAAC,GAAC,OAAIhD,GAASiD,EAAAA,EAAAA,GAAcD,EAAEE,cAAcC,OAA3C,EACXA,MAAOL,EAAY/B,OACnBN,KAAK,OACLd,KAAK,aAIZ,E,UCbc,SAASyD,IACtB,OACE,iCACE,SAACC,EAAA,EAAD,WACE,2BAAO,gBAET,gCACE,wBAAI,eACJ,SAACtD,EAAD,KACA,wBAAI,cACJ,SAAC8C,EAAD,KACA,SAAChB,EAAD,SAIP,C","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","redux/filter/selectors.js","components/Spinner/Spinner.js","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  div {\n    margin-right: 5px;\n    font-weight: 600;\n  }\n  input {\n    margin: 5px 0px;\n    border-radius: 8px;\n    border: 1px solid black;\n    font-weight: 500;\n  }\n  span {\n    display: flex;\n    justify-content: center;\n    color: red;\n    font-weight: 500;\n    text-shadow: 2px 0 #fff, -2px 0 #fff, 0 2px #fff, 0 -2px #fff, 1px 1px #fff,\n      -1px -1px #fff, 1px -1px #fff, -1px 1px #fff;\n  }\n`;\nexport const Button = styled.button`\n  width: auto;\n  height: auto;\n  padding: 7px 9px;\n  background-color: rgb(255, 255, 255);\n  font-size: 16px;\n  font-weight: 700;\n  border-radius: 5px;\n  border: 1px solid rgb(172, 172, 172);\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 6px -2px;\n  outline: none;\n  transition: all 0.25s ease 0s;\n  cursor: pointer;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Label, Button } from './ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name'\n    )\n    .required('Obligatory field'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Invalid phone number format'\n    )\n    .required('Obligatory field'),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={(values, actions) => {\n        dispatch(addContact(values));\n        actions.resetForm();\n      }}\n      validationSchema={contactSchema}\n    >\n      <Form>\n        <Label>\n          <div>Name</div>\n          <Field type=\"text\" name=\"name\"></Field>\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </Label>\n        <Label>\n          <div>Number</div>\n          <Field type=\"tel\" name=\"number\"></Field>\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </Label>\n\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nexport const Ul = styled.ul`\n  list-style: none;\n  display: inline-grid;\n`;\nexport const Button = styled.button`\n  width: auto;\n  height: auto;\n  padding: 7px 9px;\n  background-color: #fff;\n  font-size: 16px;\n  font-weight: 700;\n  border-radius: 5px;\n  border: 1px solid #acacac;\n  box-shadow: 0 2px 6px -2px rgba(0, 0, 0, 0.2);\n  outline: none;\n  transition: 0.25s ease;\n  cursor: pointer;\n  &:hover {\n    background-color: #ff0000;\n    color: white;\n  }\n`;\nexport const Li = styled.li`\n  display: inline-flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 7px 9px;\n  background-color: #fff;\n  font-size: 16px;\n  font-weight: 700;\n  border-radius: 5px;\n  border: 1px solid #acacac;\n  box-shadow: 0 2px 6px -2px rgba(0, 0, 0, 0.2);\n  outline: none;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n  div {\n    margin-right: 15px;\n  }\n`;\n","export const selectFilter = state => state.filter;\n","import styled from 'styled-components';\nimport { keyframes } from 'styled-components';\nimport { PiSpinner } from 'react-icons/pi';\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(PiSpinner)`\n  display: flex;\n  margin: auto;\n  margin-top: 20px;\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 40,\n};\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { Ul, Button, Li } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { Spinner } from 'components/Spinner/Spinner';\nimport { useEffect } from 'react';\nimport { deleteContact, getContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const filteredContacts = filter => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <>\n      {error && <p>{error.message}</p>}\n      {isLoading && <Spinner />}\n      {typeof contacts.length && !isLoading && (\n        <Ul>\n          {filteredContacts(filter).map(({ id, name, number }) => (\n            <Li key={id}>\n              <div>\n                {name}: {number}\n              </div>\n              <Button onClick={() => dispatch(deleteContact(id))} type=\"button\">\n                Delete\n              </Button>\n            </Li>\n          ))}\n        </Ul>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\nexport const H2 = styled.h2`\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 500;\n`;\nexport const Input = styled.input`\n  border-radius: 8px;\n  border: 2px solid black;\n  font-weight: 500;\n  display: block;\n  margin-inline: auto;\n`;\n","import { H2, Input } from './Filter.styled';\nimport { setFilterName } from 'redux/filter/slice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n  return (\n    <>\n      <H2>Find by Name</H2>\n      <Input\n        onChange={e => dispatch(setFilterName(e.currentTarget.value))}\n        value={filterValue.filter}\n        type=\"text\"\n        name=\"filter\"\n      />\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Helmet } from 'react-helmet';\n\nexport default function Contacts() {\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <section>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </section>\n    </>\n  );\n}\n"],"names":["Label","styled","Button","contactSchema","Yup","shape","name","matches","required","number","ContactForm","dispatch","useDispatch","initialValues","onSubmit","values","actions","addContact","resetForm","validationSchema","type","component","Ul","Li","selectFilter","state","filter","spin","keyframes","Spinner","PiSpinner","defaultProps","size","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","ContactList","useSelector","useEffect","getContacts","message","length","contact","toLowerCase","includes","filteredContacts","map","id","onClick","deleteContact","H2","Input","Filter","filterValue","onChange","e","setFilterName","currentTarget","value","Contacts","Helmet"],"sourceRoot":""}